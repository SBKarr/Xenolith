#version 450
#extension GL_GOOGLE_include_directive : enable

#include "XLGlslVertexData.h"
#include "XLGlslShadowData.h"
#include "XLGlslSdfData.h"

layout (local_size_x = 64) in;

#include "XLGlslSdfDescriptors.h"

void emplaceIntoGrid(const in int i, const in int j, const in uint gID) {
	if (i >= 0 && i < shadowData.gridWidth && j >= 0 && j < shadowData.gridHeight) {
		uint gridId = (j + shadowData.gridHeight) * shadowData.gridWidth + i;
		uint target = atomicAdd(GRID_SIZE_BUFFER[gridId], 1);
		GRID_INDEX_BUFFER[gridId * shadowData.trianglesCount + target] = gID;
	}
}

void main() {
	uint gID = gl_GlobalInvocationID.x;

    if (gID < shadowData.trianglesCount) {
		Triangle2DIndex idx = indexBuffer[0].indexes[gID];

		trianglesBuffer[0].triangles[gID].a = ((transformObjectBuffer[2].transforms[idx.transform].transform
				* vertexBuffer[1].vertices[idx.a]).xy) * shadowData.shadowDensity;
		trianglesBuffer[0].triangles[gID].b = ((transformObjectBuffer[2].transforms[idx.transform].transform
				* vertexBuffer[1].vertices[idx.b]).xy) * shadowData.shadowDensity;
		trianglesBuffer[0].triangles[gID].c = ((transformObjectBuffer[2].transforms[idx.transform].transform
				* vertexBuffer[1].vertices[idx.c]).xy) * shadowData.shadowDensity;

		trianglesBuffer[0].triangles[gID].value = idx.value;
		trianglesBuffer[0].triangles[gID].opacity = idx.opacity;

		trianglesBuffer[0].triangles[gID].bbMin =
			min(min(trianglesBuffer[0].triangles[gID].a, trianglesBuffer[0].triangles[gID].b), trianglesBuffer[0].triangles[gID].c)
			 - shadowData.bbOffset.xx;

		trianglesBuffer[0].triangles[gID].bbMax =
			max(max(trianglesBuffer[0].triangles[gID].a, trianglesBuffer[0].triangles[gID].b), trianglesBuffer[0].triangles[gID].c)
			+ shadowData.bbOffset.xx;

		ivec2 minCell = ivec2(trunc(trianglesBuffer[0].triangles[gID].bbMin / vec2(shadowData.gridSize, shadowData.gridSize)));
		ivec2 maxCell = ivec2(floor(trianglesBuffer[0].triangles[gID].bbMax / vec2(shadowData.gridSize, shadowData.gridSize)));

		for (int i = minCell.x; i <= maxCell.x; ++ i) {
			for (int j = minCell.y; j <= maxCell.y; ++ j) {
				emplaceIntoGrid(i, j, gID);
			}
		}
    }
}
