#version 450
#extension GL_GOOGLE_include_directive : enable

#include "XLGlslVertexData.h"
#include "XLGlslShadowData.h"
#include "XLGlslSdfData.h"

layout (local_size_x = 64) in;

#include "XLGlslSdfDescriptors.h"

void emplaceIntoGrid(const in int i, const in int j, const in uint gID) {
	if (i >= 0 && i < shadowData.gridWidth && j >= 0 && j < shadowData.gridHeight) {
		uint gridId = j * shadowData.gridWidth + i;
		uint target = atomicAdd(GRID_SIZE_BUFFER[gridId], 1);
		GRID_INDEX_BUFFER[gridId * shadowData.trianglesCount + target] = gID;
	}
}

void main() {
	const uint gID = gl_GlobalInvocationID.x;

    if (gID < shadowData.trianglesCount) {
		const Triangle2DIndex idx = TRIANGLE_INDEX_BUFFER[gID];
		const mat4 transform = TRANSFORM_BUFFER[idx.transform].transform;

		Triangle2DData triangle;
		triangle.a = ((transform * VERTEX_BUFFER[idx.a]).xy) * shadowData.shadowDensity;
		triangle.b = ((transform * VERTEX_BUFFER[idx.b]).xy) * shadowData.shadowDensity;
		triangle.c = ((transform * VERTEX_BUFFER[idx.c]).xy) * shadowData.shadowDensity;

		triangle.value = idx.value;
		triangle.opacity = idx.opacity;

		triangle.bbMin = min(min(triangle.a, triangle.b), triangle.c) - shadowData.bbOffset.xx;
		triangle.bbMax = max(max(triangle.a, triangle.b), triangle.c)
			+ shadowData.bbOffset.xx;

		ivec2 minCell = ivec2(trunc(triangle.bbMin / vec2(shadowData.gridSize, shadowData.gridSize)));
		ivec2 maxCell = ivec2(floor(triangle.bbMax / vec2(shadowData.gridSize, shadowData.gridSize)));

		for (int i = minCell.x; i <= maxCell.x; ++ i) {
			for (int j = minCell.y; j <= maxCell.y; ++ j) {
				emplaceIntoGrid(i, j, gID);
			}
		}

		TRIANGLE_DATA_BUFFER[gID] = triangle;
    }
}
