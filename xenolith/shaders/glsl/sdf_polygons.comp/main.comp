#version 450
#extension GL_GOOGLE_include_directive : enable

#include "XLGlslVertexData.h"
#include "XLGlslShadowData.h"
#include "XLGlslSdfData.h"

layout (local_size_x = 64) in;

#include "XLGlslSdfDescriptors.h"

uint GridSizeOffset;
uint GridIndexOffset;

void emplaceIntoGrid(const in int i, const in int j, const in uint gID) {
	if (i >= 0 && i < shadowData.gridWidth && j >= 0 && j < shadowData.gridHeight) {
		uint gridId = (j) * shadowData.gridWidth + i;
		uint target = atomicAdd(GRID_SIZE_BUFFER[shadowData.polygonGridSizeOffset + gridId], 1);
		GRID_INDEX_BUFFER[shadowData.polygonGridIndexOffset + gridId * shadowData.circlesCount + target] = gID;
	}
}

void main() {
	const uint gID = gl_GlobalInvocationID.x;

    if (gID < shadowData.polygonsCount) {
		const Polygon2DIndex idx = POLYGON_INDEX_BUFFER[gID];
		const mat4 transform = TRANSFORM_BUFFER[idx.transform].transform;

		Polygon2DData polygon;
		polygon.origin = idx.origin;
		polygon.count = idx.count;
		polygon.value = idx.value;
		polygon.opacity = idx.opacity;

		vec2 pt = ((transform * VERTEX_BUFFER[polygon.origin]).xy) * shadowData.shadowDensity;
		polygon.bbMin = polygon.bbMax = pt;
		VERTEX_BUFFER[polygon.origin] = vec4(pt, 0, 1);

		for (uint i = 1; i < idx.count; ++ i) {
			pt = ((transform * VERTEX_BUFFER[polygon.origin + i]).xy) * shadowData.shadowDensity;
			polygon.bbMin = min(polygon.bbMin, pt);
			polygon.bbMax = max(polygon.bbMax, pt);

			VERTEX_BUFFER[polygon.origin + i] = vec4(pt, 0, 1);
		}

		polygon.bbMin -= shadowData.bbOffset.xx;
		polygon.bbMax += shadowData.bbOffset.xx;

		ivec2 minCell = ivec2(trunc(polygon.bbMin / vec2(shadowData.gridSize, shadowData.gridSize)));
		ivec2 maxCell = ivec2(floor(polygon.bbMax / vec2(shadowData.gridSize, shadowData.gridSize)));

		for (int i = minCell.x; i <= maxCell.x; ++ i) {
			for (int j = minCell.y; j <= maxCell.y; ++ j) {
				emplaceIntoGrid(i, j, gID);
			}
		}

		POLYGON_DATA_BUFFER[gID] = polygon;
    }
}
