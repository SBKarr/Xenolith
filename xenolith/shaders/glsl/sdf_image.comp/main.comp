#version 450

layout (local_size_x = 8, local_size_y = 8) in;

struct TriangleData {
	vec4 bb;
	vec2 a;
	vec2 b;
	vec2 c;
	float value;
	float opacity;
};

layout(set = 0, binding = 1) buffer TrianglesBuffer {
	TriangleData triangles[];
} trianglesBuffer;

layout(set = 0, binding = 2, r16f) uniform writeonly image2D sdfImage;

layout (push_constant) uniform pcb {
	uint trianglesCount;
	uint padding0;
	uint padding1;
} pushConstants;

float map(in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2) {
	vec2 e0 = p1 - p0;
	vec2 e1 = p2 - p1;
	vec2 e2 = p0 - p2;

	vec2 v0 = p - p0;
	vec2 v1 = p - p1;
	vec2 v2 = p - p2;

	vec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );
	vec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );
	vec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );
    
    float s = e0.x*e2.y - e0.y*e2.x;
    vec2 d = min( min( vec2( dot( pq0, pq0 ), s*(v0.x*e0.y-v0.y*e0.x) ),
                       vec2( dot( pq1, pq1 ), s*(v1.x*e1.y-v1.y*e1.x) )),
                       vec2( dot( pq2, pq2 ), s*(v2.x*e2.y-v2.y*e2.x) ));

	return -sqrt(d.x)*sign(d.y);
}

void main() {
	uint xID = gl_GlobalInvocationID.x;
	uint yID = gl_GlobalInvocationID.y;
	
	ivec2 imgSize = imageSize(sdfImage);

	vec2 coord = vec2((float(xID) / float(imgSize.x)) * 2.0 - 1.0, (float(yID) / float(imgSize.y)) * 2.0 - 1.0);
	float value = 1.0; // map(coord, trianglesBuffer.triangles[0].a, trianglesBuffer.triangles[0].b, trianglesBuffer.triangles[0].c); // 1.0;
	for (uint i = 0; i < pushConstants.trianglesCount; ++ i) {
		value = min(value, map(coord, trianglesBuffer.triangles[i].a, trianglesBuffer.triangles[i].b, trianglesBuffer.triangles[i].c));
	}

	imageStore(sdfImage, ivec2(xID, yID), value.xxxx);
}
